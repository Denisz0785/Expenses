-- c помощью WITH добавляем новую строку в expense_type
with ts as (insert into expense_type(users_id, type_expenses) values ((select id from users where login='bird07'), 'jumping')
-- если такой type_expense уже существует, то меняется users_id на id клиента, к-й мы получаем в подзапросе по логину
on conflict on constraint uniq_type do update set users_id=(select id from users where login='bird07')
-- возвращается id клиента, чтобы использовать его в основном запросе
returning id as id_exp)
-- вставка новой строки в expense. id получаем из табличного выражения полученного выше с помощью WITH
insert into expense(expense_type_id, reated_at, spent_money) values ((select id_exp from ts), now(), 1300)
;

--в таблице expense_type я добавил ограничение Unique, чтобы не было возможности создать дубли по type_expense(наименованию расходов):
"uniq_type" UNIQUE CONSTRAINT, btree (type_expenses)
-- в таблице expense я добавил ограничение ON DELETE CASCADE, чтобы при удалении типов расхода из expense_type они каскадно удалялись из expense (я сделал это, тк было много дублей в expense_type и не было возможности их удалить):
"expfk" FOREIGN KEY (expense_type_id) REFERENCES expense_type(id) ON DELETE CASCADE

